<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>开发进度</title>
    <url>/posts/27054ba3/</url>
    <content><![CDATA[<h2 id="更新内容">更新内容</h2>
<ol type="1">
<li>添加评论系统（Gitalk）</li>
<li>配置图床（Github + PicGo + CDNJS）</li>
<li>添加留言区，设置页面评论功能</li>
<li>添加了图片缩放等功能</li>
<li>添加了图片懒加载功能</li>
<li>设置书签为手动模式</li>
<li>移除菜单中分类和标签，将其放在侧边栏下方</li>
<li>添加 CNAME 文件，解决部署后自定义域名失效问题 [1] (2023.11.17)</li>
</ol>
<h2 id="参考">参考</h2>
<p>[1] CSDN 文章：<a
href="https://blog.csdn.net/weixin_41747528/article/details/102772937">解决
Hexo 部署 Github Pages 自定义域名失效的问题(即使已添加 CNAME）</a></p>
]]></content>
      <tags>
        <tag>开发记录</tag>
      </tags>
  </entry>
  <entry>
    <title>Artificial Neuron Network (1)</title>
    <url>/posts/bed2d29b/</url>
    <content><![CDATA[<h2 id="introduction-to-ann">1. Introduction to ANN</h2>
<h4 id="relationship-between-the-key-concepts">1.1 Relationship between
the key concepts</h4>
<p>我们知道ANN是人工智能领域的一环，但是它具体在这个领域有什么样的作用呢？要回答这个问题，我们就需要搞清楚人工智能方面几个概念之间的关系，即包括：</p>
<ul>
<li>Artificial Intelligence (AI)</li>
<li>Machine Learning (ML)</li>
<li>Neuron Network (NN)</li>
<li>Deep Learning (DL)</li>
</ul>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/Yifei20/blog-resource-bed/img/relationship-ai-key-concepts.png"
alt="relationship demonstration" />
<figcaption aria-hidden="true">relationship demonstration</figcaption>
</figure>
<p>首先，AI（人工智能）是一个很大很笼统的概念，我们可以将很多事情称为人工智能，比如说让机器进行1+1的算数运算，虽然这是一种程度很低的人工智能，但它确实也能够模拟人类的一部分能力。</p>
<p>其次，ML（机器学习）是人工智能的一个子领域，其指的是，通过统计学方法或是数学模式，使得计算机能够从数据中进行学习改进，从而达到某种模拟人类的能力。</p>
<p>而，NN（神经网络）则是一类机器学习算法模型，其结构设计由早期的神经学家在解剖和生理学的的研究成果启发而来，其一开始的目的在于模拟大脑的神经结构。但是随着发展，神经网络的结构和真正的神经元除了名字，差别已经非常大了，而演化来的神经网络则被广泛应用到了机器学习中。</p>
<p>最后，DL（深度学习）是一类多层（Multi-Layer）的神经网络，与神经网络一样，是机器学习的一个子领域。</p>
<h4 id="abstract-neuron-from-biology-to-computer-sicence">1.2 Abstract
neuron (from Biology to Computer Sicence)</h4>
<p>我们在高中都学过神经元的基本结构和功能，这里我们基于神经元的结构和功能，尝试通过构建一个抽象神经元来模拟真实的神经元。</p>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/Yifei20/blog-resource-bed/img/abstract-neuron.png"
alt="abstract neuron" />
<figcaption aria-hidden="true">abstract neuron</figcaption>
</figure>
<p>如上图所示，我们构建一个抽象神经元<span
class="math inline">\(j\)</span>。</p>
<ol type="1">
<li>输入（Inputs）：神经元能够彼此接受信息，抽象神经元<span
class="math inline">\(j\)</span>中有<span
class="math inline">\(n\)</span>个输入<span
class="math inline">\(x_1,...,x_n\)</span>还有输出<span
class="math inline">\(o_j\)</span>。</li>
<li>权重（Weights）：此外，神经元不同路径的输入的重要性可能不同，对应<span
class="math inline">\(n\)</span>条不同路径的不同权重<span
class="math inline">\(w_{j1},w_{j2},...,w_{jn}\)</span>。</li>
<li>偏差（Bias）：通常神经网络模型还会有偏差（即bias，对应<span
class="math inline">\(x_0,w_{0j}\)</span>，其中<span
class="math inline">\(x_1\)</span>总为<span
class="math inline">\(+1\)</span>，而<span
class="math inline">\(w_{0j}\)</span>可在学习中改变）。</li>
<li>再者，神经元会处理接受的信息，并判断如何做出反应。这对应的是：
<ol type="1">
<li><strong>处理输入信息：</strong>通过转化函数（transfer
function），将零散的输入数值转化成一个值，以进行下一步处理。这个转换函数接受加权后的输入，输出转化后的网络输入值（net
input）<span class="math inline">\(net_j\)</span>。
比如，一个简单的转化函数可以是求和函数<span
class="math inline">\(\sum\)</span>，将加权输入值求和传递到下一步。</li>
<li><strong>决定输出：</strong>使用一个激活函数（activation
function）根据处理过的信息决定神经元的输出。一个简单的激活函数可以包括一个阈值（threshold）<span
class="math inline">\(\theta_j\)</span>，函数简单得将输入的<span
class="math inline">\(net_j\)</span>和阈值<span
class="math inline">\(\theta_j\)</span>进行比较，如果输入能够超过阈值，那么神经元被激活（activated），向下一个神经元传递信息；否则不做出行动。</li>
</ol></li>
</ol>
<h2 id="constructing-ann-from-the-beginning">2. Constructing ANN from
the Beginning</h2>
<p>基于前面的理解，我们开始从头构建神经网络的概念。首先我们从最简单的模型开始学起。<em>需要注意的是，虽然下面的不同模型直接有时间上的递进和概念上相对的继承关系，但实际上他们的概念互不隶属，注意区分理解。</em></p>
<h4 id="the-mcculloch-pitts-neuron-1943">2.1 The McCulloch-Pitts Neuron
(1943)</h4>
<blockquote>
<p>为了方便讨论，这里只讨论仅存在唯一神经元的情况，故不对属性作神经元标记</p>
</blockquote>
<h5 id="basic-definition">2.1.1 Basic definition</h5>
<p>这种神经元模型的神经元有下面几个特点或属性：</p>
<ol type="1">
<li>离散时间（Discrete-time）：神经元的输入输出等值具有离散的时间属性</li>
<li>二元（Binary）：输入<span
class="math inline">\(a^t_i\)</span>输出<span
class="math inline">\(x^t\)</span>是二元的，即只有1和0两种情况。</li>
<li>有激活和抑制权重（Excitatory and Inhibitory
Weights）：权重有激活（excitatory, +1）和抑制（inhibitory,
-1）两种情况。</li>
<li>有激活阈值（Excitation Threshold）：每个神经元都有一个激活阈值<span
class="math inline">\(\theta\)</span></li>
</ol>
<h5 id="mp_neuron-demo"><img data-src="https://cdn.jsdelivr.net/gh/Yifei20/blog-resource-bed/img/mc_neuron%20demo.png"
alt="mp_neuron demo" /></h5>
<h5 id="calculating-the-output">2.1.2 Calculating the output</h5>
<p>对一个MP神经元，其<span
class="math inline">\(t\)</span>时刻的输入所对应的输出为<span
class="math inline">\(x^{t+1}\)</span>，当且仅当其状态达到阈值时输出为1，即
<span class="math display">\[
x^{t+1}=
\begin{cases}
1\text{, iff }S^t=\sum_{i=1}^n a^t_iw_i\ge\theta\\
0\text{, otherwise}
\end{cases}
\]</span>
神经元的<strong>状态</strong>（State）：我们称这里某时刻的加权输入总和（instant
total sum）<span class="math inline">\(S^t=\sum_{i=1}^n
a^t_iw_i\)</span>，为 Instant <strong>State</strong> of the
Neuron。神经元还有其他状态，如Previous State, etc..</p>
<h5 id="mathematical-definition">2.1.3 Mathematical Definition</h5>
<p><strong>Write state as <span class="math inline">\(f(t)\)</span>:
</strong>如前面所示，MP神经元某时刻的状态与其他时刻的值无关，仅与其所属时刻的输入和权重值有关，即<span
class="math inline">\(S^t=\sum_{i=1}^n a^t_iw_i=f(t)\)</span>。</p>
<p><strong>Write output as <span class="math inline">\(g(f(t))\)</span>:
</strong>神经元输出<span class="math inline">\(x^{t+1}\)</span>对应<span
class="math inline">\(t\)</span>时刻的函数可以写成：<span
class="math inline">\(x^{t+1}=x(t)=g(S^t)=g(f(t))\)</span></p>
<p><strong>Heaviside Function: </strong>这里的<span
class="math inline">\(g()\)</span>称作阈值激活函数（threshold activation
function），用来判断给定状态是否满足输出条件。</p>
<p>对于MP神经元，<span class="math inline">\(g()\)</span>实际上是一种
Heaviside (unit step) function，即<span
class="math inline">\(H(S^t-\theta)\)</span> <span
class="math display">\[
H(x)=\begin{cases}1\text{, }x\ge0;\\0\text{, }x&lt;0.\end{cases}
\]</span> <img data-src="https://cdn.jsdelivr.net/gh/Yifei20/blog-resource-bed/img/unit%20step%20func.jpg"
alt="unit step function" /></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>ANN</tag>
        <tag>DL</tag>
        <tag>ML</tag>
      </tags>
  </entry>
  <entry>
    <title>给学弟学妹们的经验分享</title>
    <url>/posts/99dac9e8/</url>
    <content><![CDATA[<p>这里我分享一下ICS大三的学习经验，希望能给学弟学妹一些帮助。</p>
<h2 id="关于自学">关于自学</h2>
<p>对CS学生来说，自学是非常重要的，毕竟学校没办法把所有东西都讲给你，每个人想学的也各有不同。再者，我们学校CS教学深度越来越浅，比如到大三了还没有一门课教过Git、Markdown还有Vim等基本的工具，不额外自学恐怕未来很难能胜任比较好的职位。</p>
<p>所以我想给学弟学妹们推荐几个基本的自学资源：</p>
<ol type="1">
<li><a
href="https://csdiy.wiki/">CS自学指南</a>：堪称CS自学资源大全，有各类CS课程的资源和经验分享，可以找自己感兴趣的学。</li>
<li><a href="https://missing.csail.mit.edu/2020/">MIT Missing Semester
2020</a>：CS入门课，会教很多重要的基本工具，如Git、Vim等，以后会经常用到。这门课也有中文网站，可以自己找找。</li>
<li><a href="https://sp21.datastructur.es/">UC Berkeley
CS61b</a>：伯克利的经典数据结构课程，基于Java讲解数据结构，同时也会教完成作业需要的Git等工具的使用。一门课顶我们四门课的量，质量没啥可说的，就是学起来要花不少时间。</li>
</ol>
<h2 id="关于大作业">关于大作业</h2>
<p>大三的课程可能会涉及到不少团队合作的大作业，就我们而言有小组大作业的有CAN201、CPT202、CPT208和CPT204，需要大家提前组队。其中有Report的有CAN201、CPT202以及CPT208，而CPT204的为视频Pre。有Report的三个大作业的Report评分占比基本上都超过50%。所以我个人认为Report往往比Coding更加重要，这可能是大家会忽略的地方。而Report会经常用到大一大二EAP所学的知识，当然也要根据要求变化，但学术写作的写作技巧基本上都是一致的，无非就是内容更偏向技术方面。学弟学妹们可以参考具体课程要求来看。</p>
<h2 id="关于具体课程">关于具体课程</h2>
<p>我主要分享三门我分数比较高的课的经验，其他课程我都七十多分左右就不再具体讲了：</p>
<ol type="1">
<li>CAN201 (Introduction to Networking)： 88%</li>
<li>INT201(Decision Computation and Language)： 82%</li>
<li>CPT204 (Advanced OO Programming)： 100 %</li>
</ol>
<h3 id="can201-introduction-to-networking">1. CAN201 (Introduction to
Networking)</h3>
<h4 id="参考资料考试准备">1.1 参考资料&amp;考试准备</h4>
<p>资料：如果大家跟我一样听学校的课比较懵，可以参考中科大郑铨老师的计算机网络课，b站就能看：<a
href="https://www.bilibili.com/video/BV1JV411t7ow">中科大郑铨-计算机网络</a>。要注意的是，中科大的课在有些地方会将得更详细一点，可以对照学校课件来看，不过基本上都能对应得比较好。</p>
<p>考试：这门课期末考试难度不大，题型比较固定。建议把前两年的题都做会订正好，这样考八十多分还是比较容易的。</p>
<h4 id="大作业">1.2 大作业</h4>
<p>这门课的大作业似乎每年都不太一样，但基本上就是对网络协议和路由交换等内容的实操，代码部分可能需要一定编程理解能力。可能会给你一堆很长的代码，要你Debug并且完成空着的部分，一上来分析起长代码来可能很头疼，但是按照函数执行顺序一条条理顺下来之后其实就很简单了。不过这个作业大头其实在Report上，要写很多字，还要作图、写伪代码、实验分析什么的，还是挺花时间的，所以最好别拖太晚。</p>
<!-- 我把这门课的课程资料上传到了 Github。如果你想参考，可以通过这个链接访问：[CAN201-Introduction-to-Networking-22S1
](https://github.com/Yifei20/CAN201-Introduction-to-Networking-22S1) -->
<h3 id="int201-decision-computation-and-language">2. INT201 (Decision
Computation and Language)</h3>
<p>这门课教的内容基本上都比较简单，建议可以课前自己先学一遍，课上老师会一步步写过程，跟起来会容易很多。</p>
<p>前面部分内容可以参考哈工大的：<a
href="https://www.icourse163.org/course/HIT-1206319802">形式语言与自动机理论</a>，但是后面可能就不太一致了。</p>
<p>和计算机网络一样，这门课考试形式我记得也比较固定，平常的练习题都做好，往年试题也做一下的话拿比较好的分数问题不大。</p>
<h3 id="cpt204-advanced-oo-programming">3. CPT204 (Advanced OO
Programming)</h3>
<p>这门课我拿了满分，简单来讲就是Java的进阶课程，用Java语言讲面对对象编程的各种概念。课程难度比较小，历年均分都很高，但也是很实用的一门课，无论是工程实践还是参加算法竞赛，都能给你很大帮助。我是上完课几乎裸考的蓝桥杯B组国三，如果你想参加蓝桥杯Java组，那推荐你可以先学下面的6.031同时刷Leetcode来准备基础知识。</p>
<p>这门课我完全自己看课件和下面的资料上的，结合这两个学基本上不会遗漏任何知识点了，所以我也就没去上过课。</p>
<h4 id="参考资料">3.1参考资料</h4>
<p>这门课知识内容基本上就是 MIT 6.031: Software Construction
的简化版，并且MIT网站上有很详细的文字版和例题，所以可以很大程度上作为知识参考</p>
<p>我是看的20秋的：<a href="http://web.mit.edu/6.031/www/fa20/">6.031:
Software Construction, Fall 2020</a></p>
<h4 id="大作业-1">3.2 大作业</h4>
<p>我们去年的大作业就是实现一个游戏的AI玩家和GUI，还有视频的Pre展示。这个基本上就是UC
Berkeley
CS61b的某个大作业的修改版，框架源码基本上没改，所以网络上有很多可以参考的资料。不过具体的算法实现需要查文献资料，但不需要你卷算法部分，评分更在于结合文献讲清楚使用算法的原因，以及其他课上内容的实践。此外还有一个额外加分的GUI，不过加得不多做起来也挺废时间的，看个人取舍吧。</p>
<p>此外，课程还包含比较多的代码实践，基本上更在于对实现的数据结构的理解，基本不太涉及复杂的算法，难度都比较低。如果觉得比较困难可能平时就需要多刷刷题，看看是Java语言不会用还是数据结构没理解，尽量自己做别跟别人要答案，因为考试还有限时写代码的部分。</p>
<!-- 这门课的课程资料也已经上传到了 Github。如果你想参考，可以通过这个链接访问：[CPT204-Advanced-Object-Oriented-Programming-22S2](https://github.com/Yifei20/CPT204-Advanced-Object-Oriented-Programming-22S2) -->
<p><em>未来有时间可能会总结一下在西浦的整段学习经历，然后会根据那些重新写一遍这篇文章。</em></p>
]]></content>
      <categories>
        <category>经验分享</category>
      </categories>
  </entry>
</search>
